{"ast":null,"code":"var _jsxFileName = \"/Users/ustudio/Ustudio/\\u20A9/hmstudy/todo-list/todo/kimhyunmin-todo/src/components/TodoItem.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { ItemWrapper, Item, DeleteButton, CheckboxWrapper } from \"@/styles/TodoItemStyles\";\nimport checkIcon from \"@/assets/checkbox.svg\";\nimport checkNoIcon from \"@/assets/checkbox_nocheck.svg\";\nimport deleteIcon from \"@/assets/delete.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CheckBox = _ref => {\n  let {\n    isChecked,\n    handleCheck\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(CheckboxWrapper, {\n    onClick: handleCheck,\n    style: {\n      backgroundImage: `url(${isChecked ? checkIcon : checkNoIcon})`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 3\n  }, this);\n};\n_c = CheckBox;\n// TodoItem 컴포넌트는 각각의 할 일 항목을 나타냅니다.\nconst TodoItem = _ref2 => {\n  _s();\n  let {\n    todo,\n    onRemove\n  } = _ref2;\n  // useState(false) 를 사용하여 isChecked 라는 state를 관리하고 있습니다. 이 state는 할 일의 체크 여부를 나타냅니다.\n  const [isChecked, setIsChecked] = useState(false);\n\n  // handleCheck 함수는 체크박스의 상태를 변경하는 이벤트 핸들러입니다. 현재 isChecked 값을 반대로 설정합니다.\n  const handleCheck = () => {\n    setIsChecked(!isChecked);\n  };\n\n  // CheckBox 컴포넌트에서 handleCheck 함수를 전달받아 체크박스의 이벤트 핸들러로 설정합니다.\n  // Item 컴포넌트에 전달된 todo prop을 사용하여 할 일의 내용을 표시합니다.\n  // DeleteButton 컴포넌트에서 상위 컴포넌트로부터 전달받은 onRemove 함수를 클릭 이벤트 핸들러로 설정하여 삭제 기능을 구현했습니다.\n  return /*#__PURE__*/_jsxDEV(ItemWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(CheckBox, {\n      isChecked: isChecked,\n      handleCheck: handleCheck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Item, {\n      isChecked: isChecked,\n      children: todo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeleteButton, {\n      src: deleteIcon,\n      alt: \"\\uC0AD\\uC81C \\uBC84\\uD2BC\",\n      onClick: onRemove\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoItem, \"ZhOKOS+Td3oentFkMpi7jRDXPaI=\");\n_c2 = TodoItem;\nexport default TodoItem;\nvar _c, _c2;\n$RefreshReg$(_c, \"CheckBox\");\n$RefreshReg$(_c2, \"TodoItem\");","map":{"version":3,"names":["React","useState","ItemWrapper","Item","DeleteButton","CheckboxWrapper","checkIcon","checkNoIcon","deleteIcon","jsxDEV","_jsxDEV","CheckBox","_ref","isChecked","handleCheck","onClick","style","backgroundImage","fileName","_jsxFileName","lineNumber","columnNumber","_c","TodoItem","_ref2","_s","todo","onRemove","setIsChecked","children","src","alt","_c2","$RefreshReg$"],"sources":["/Users/ustudio/Ustudio/₩/hmstudy/todo-list/todo/kimhyunmin-todo/src/components/TodoItem.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  ItemWrapper,\n  Item,\n  DeleteButton,\n  CheckboxWrapper,\n} from \"@/styles/TodoItemStyles\";\nimport checkIcon from \"@/assets/checkbox.svg\";\nimport checkNoIcon from \"@/assets/checkbox_nocheck.svg\";\nimport deleteIcon from \"@/assets/delete.svg\";\n\nconst CheckBox = ({\n  isChecked,\n  handleCheck,\n}: {\n  isChecked: boolean;\n  handleCheck: () => void;\n}) => (\n  <CheckboxWrapper\n    onClick={handleCheck}\n    style={{\n      backgroundImage: `url(${isChecked ? checkIcon : checkNoIcon})`,\n    }}\n  />\n);\n\ninterface TodoItemProps {\n  todo: string;\n  onRemove: () => void;\n}\n\n// TodoItem 컴포넌트는 각각의 할 일 항목을 나타냅니다.\nconst TodoItem = ({ todo, onRemove }: TodoItemProps) => {\n  // useState(false) 를 사용하여 isChecked 라는 state를 관리하고 있습니다. 이 state는 할 일의 체크 여부를 나타냅니다.\n  const [isChecked, setIsChecked] = useState(false);\n\n  // handleCheck 함수는 체크박스의 상태를 변경하는 이벤트 핸들러입니다. 현재 isChecked 값을 반대로 설정합니다.\n  const handleCheck = () => {\n    setIsChecked(!isChecked);\n  };\n\n  // CheckBox 컴포넌트에서 handleCheck 함수를 전달받아 체크박스의 이벤트 핸들러로 설정합니다.\n  // Item 컴포넌트에 전달된 todo prop을 사용하여 할 일의 내용을 표시합니다.\n  // DeleteButton 컴포넌트에서 상위 컴포넌트로부터 전달받은 onRemove 함수를 클릭 이벤트 핸들러로 설정하여 삭제 기능을 구현했습니다.\n  return (\n    <ItemWrapper>\n      <CheckBox isChecked={isChecked} handleCheck={handleCheck} />\n      <Item isChecked={isChecked}>{todo}</Item>\n      <DeleteButton src={deleteIcon} alt=\"삭제 버튼\" onClick={onRemove} />\n    </ItemWrapper>\n  );\n};\n\nexport default TodoItem;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SACEC,WAAW,EACXC,IAAI,EACJC,YAAY,EACZC,eAAe,QACV,yBAAyB;AAChC,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,WAAW,MAAM,+BAA+B;AACvD,OAAOC,UAAU,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,QAAQ,GAAGC,IAAA;EAAA,IAAC;IAChBC,SAAS;IACTC;EAIF,CAAC,GAAAF,IAAA;EAAA,oBACCF,OAAA,CAACL,eAAe;IACdU,OAAO,EAAED,WAAY;IACrBE,KAAK,EAAE;MACLC,eAAe,EAAG,OAAMJ,SAAS,GAAGP,SAAS,GAAGC,WAAY;IAC9D;EAAE;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAAA,CACH;AAACC,EAAA,GAbIX,QAAQ;AAoBd;AACA,MAAMY,QAAQ,GAAGC,KAAA,IAAuC;EAAAC,EAAA;EAAA,IAAtC;IAAEC,IAAI;IAAEC;EAAwB,CAAC,GAAAH,KAAA;EACjD;EACA,MAAM,CAACX,SAAS,EAAEe,YAAY,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAMa,WAAW,GAAGA,CAAA,KAAM;IACxBc,YAAY,CAAC,CAACf,SAAS,CAAC;EAC1B,CAAC;;EAED;EACA;EACA;EACA,oBACEH,OAAA,CAACR,WAAW;IAAA2B,QAAA,gBACVnB,OAAA,CAACC,QAAQ;MAACE,SAAS,EAAEA,SAAU;MAACC,WAAW,EAAEA;IAAY;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAC5DX,OAAA,CAACP,IAAI;MAACU,SAAS,EAAEA,SAAU;MAAAgB,QAAA,EAAEH;IAAI;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAQ,eACzCX,OAAA,CAACN,YAAY;MAAC0B,GAAG,EAAEtB,UAAW;MAACuB,GAAG,EAAC,2BAAO;MAAChB,OAAO,EAAEY;IAAS;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACpD;AAElB,CAAC;AAACI,EAAA,CAnBIF,QAAQ;AAAAS,GAAA,GAART,QAAQ;AAqBd,eAAeA,QAAQ;AAAC,IAAAD,EAAA,EAAAU,GAAA;AAAAC,YAAA,CAAAX,EAAA;AAAAW,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}