{"ast":null,"code":"var _jsxFileName = \"/Users/ustudio/Ustudio/\\u20A9/hmstudy/todo-list/todo/kimhyunmin-todo/src/components/TodoForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { FormWrapper, Input, Button } from \"@/styles/TodoFormStyles\";\n\n// interface: TypeScript에서 interface는 객체의 타입을 정의하는 방법 중 하나입니다. 인터페이스 이름은 일반적으로 첫 글자를 대문자로 하여 PascalCase로 작성합니다.\n// interface OnTodoSubmitProps: OnTodoSubmitProps라는 이름의 인터페이스를 정의합니다. 이 인터페이스는 TodoForm 컴포넌트의 속성을 정의하며, 이 컴포넌트를 사용할 때 전달되어야 하는 속성의 타입을 명시합니다.\n// onTodoSubmit: (todo: string) => void;: onTodoSubmit은 Props 인터페이스의 추가 속성으로, 함수 타입을 가집니다. 이 함수는 할 일 항목을 추가할 때 호출되며, 매개변수로 할 일의 문자열 값을 받습니다. 함수의 반환 타입은 void로, 반환값이 없음을 나타냅니다. 이 속성을 통해 TodoForm 컴포넌트는 할 일이 추가될 때 상위 컴포넌트로부터 전달받은 onTodoSubmit 함수를 호출할 수 있습니다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// TodoForm 컴포넌트는 할 일을 입력하고 추가하는 기능을 담당합니다.\nconst TodoForm = _ref => {\n  _s();\n  let {\n    onTodoSubmit\n  } = _ref;\n  // useState('') 를 사용하여 inputValue라는 state를 관리하고 있습니다. 이 state는 입력받은 할 일의 내용을 저장합니다.\n  const [inputValue, setInputValue] = useState(\"\");\n  // 입력 필드의 아웃라인 색상을 관리할 새로운 상태\n  const [isInputEmpty, setIsInputEmpty] = useState(false);\n  // handleSubmit 함수는 할 일을 추가하는 이벤트 핸들러입니다. 입력된 내용이 있으면 상위 컴포넌트로부터 전달받은 onTodoSubmit 함수를 호출하여 할 일을 추가합니다.\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (inputValue.trim()) {\n      onTodoSubmit(inputValue);\n      setInputValue(\"\");\n      setIsInputEmpty(false);\n    } else {\n      setIsInputEmpty(true);\n    }\n  };\n\n  // FormWrapper 컴포넌트에서 onSubmit 이벤트로 handleSubmit 함수를 바인딩하고 Input컴포넌트에서 입력된 값을 inputValue state에 저장합니다.\n  return /*#__PURE__*/_jsxDEV(FormWrapper, {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      value: inputValue,\n      onChange: e => {\n        setInputValue(e.target.value);\n        setIsInputEmpty(false);\n      },\n      placeholder: \"\\uD560 \\uC77C\\uC744 \\uCD94\\uAC00\\uD574\\uC8FC\\uC138\\uC694\",\n      style: {\n        borderColor: isInputEmpty ? \"#ff9898\" : \"#eeeeee\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      children: \"\\uCD94\\uAC00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoForm, \"9rW628D6idbur8hc5XFtVb8bKf4=\");\n_c = TodoForm;\nexport default TodoForm;\nvar _c;\n$RefreshReg$(_c, \"TodoForm\");","map":{"version":3,"names":["React","useState","FormWrapper","Input","Button","jsxDEV","_jsxDEV","TodoForm","_ref","_s","onTodoSubmit","inputValue","setInputValue","isInputEmpty","setIsInputEmpty","handleSubmit","e","preventDefault","trim","onSubmit","children","value","onChange","target","placeholder","style","borderColor","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["/Users/ustudio/Ustudio/₩/hmstudy/todo-list/todo/kimhyunmin-todo/src/components/TodoForm.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { FormWrapper, Input, Button } from \"@/styles/TodoFormStyles\";\n\n// interface: TypeScript에서 interface는 객체의 타입을 정의하는 방법 중 하나입니다. 인터페이스 이름은 일반적으로 첫 글자를 대문자로 하여 PascalCase로 작성합니다.\n// interface OnTodoSubmitProps: OnTodoSubmitProps라는 이름의 인터페이스를 정의합니다. 이 인터페이스는 TodoForm 컴포넌트의 속성을 정의하며, 이 컴포넌트를 사용할 때 전달되어야 하는 속성의 타입을 명시합니다.\n// onTodoSubmit: (todo: string) => void;: onTodoSubmit은 Props 인터페이스의 추가 속성으로, 함수 타입을 가집니다. 이 함수는 할 일 항목을 추가할 때 호출되며, 매개변수로 할 일의 문자열 값을 받습니다. 함수의 반환 타입은 void로, 반환값이 없음을 나타냅니다. 이 속성을 통해 TodoForm 컴포넌트는 할 일이 추가될 때 상위 컴포넌트로부터 전달받은 onTodoSubmit 함수를 호출할 수 있습니다.\ninterface OnTodoSubmitProps {\n  onTodoSubmit: (todo: string) => void;\n}\n\n// TodoForm 컴포넌트는 할 일을 입력하고 추가하는 기능을 담당합니다.\nconst TodoForm = ({ onTodoSubmit }: OnTodoSubmitProps) => {\n  // useState('') 를 사용하여 inputValue라는 state를 관리하고 있습니다. 이 state는 입력받은 할 일의 내용을 저장합니다.\n  const [inputValue, setInputValue] = useState(\"\");\n  // 입력 필드의 아웃라인 색상을 관리할 새로운 상태\n  const [isInputEmpty, setIsInputEmpty] = useState(false);\n  // handleSubmit 함수는 할 일을 추가하는 이벤트 핸들러입니다. 입력된 내용이 있으면 상위 컴포넌트로부터 전달받은 onTodoSubmit 함수를 호출하여 할 일을 추가합니다.\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (inputValue.trim()) {\n      onTodoSubmit(inputValue);\n      setInputValue(\"\");\n      setIsInputEmpty(false);\n    } else {\n      setIsInputEmpty(true);\n    }\n  };\n\n  // FormWrapper 컴포넌트에서 onSubmit 이벤트로 handleSubmit 함수를 바인딩하고 Input컴포넌트에서 입력된 값을 inputValue state에 저장합니다.\n  return (\n    <FormWrapper onSubmit={handleSubmit}>\n      <Input\n        value={inputValue}\n        onChange={(e) => {\n          setInputValue(e.target.value);\n          setIsInputEmpty(false);\n        }}\n        placeholder=\"할 일을 추가해주세요\"\n        style={{\n          borderColor: isInputEmpty ? \"#ff9898\" : \"#eeeeee\",\n        }}\n      />\n      <Button type=\"submit\">추가</Button>\n    </FormWrapper>\n  );\n};\n\nexport default TodoForm;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,KAAK,EAAEC,MAAM,QAAQ,yBAAyB;;AAEpE;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKA;AACA,MAAMC,QAAQ,GAAGC,IAAA,IAAyC;EAAAC,EAAA;EAAA,IAAxC;IAAEC;EAAgC,CAAC,GAAAF,IAAA;EACnD;EACA,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAChD;EACA,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACvD;EACA,MAAMc,YAAY,GAAIC,CAAkB,IAAK;IAC3CA,CAAC,CAACC,cAAc,EAAE;IAClB,IAAIN,UAAU,CAACO,IAAI,EAAE,EAAE;MACrBR,YAAY,CAACC,UAAU,CAAC;MACxBC,aAAa,CAAC,EAAE,CAAC;MACjBE,eAAe,CAAC,KAAK,CAAC;IACxB,CAAC,MAAM;MACLA,eAAe,CAAC,IAAI,CAAC;IACvB;EACF,CAAC;;EAED;EACA,oBACER,OAAA,CAACJ,WAAW;IAACiB,QAAQ,EAAEJ,YAAa;IAAAK,QAAA,gBAClCd,OAAA,CAACH,KAAK;MACJkB,KAAK,EAAEV,UAAW;MAClBW,QAAQ,EAAGN,CAAC,IAAK;QACfJ,aAAa,CAACI,CAAC,CAACO,MAAM,CAACF,KAAK,CAAC;QAC7BP,eAAe,CAAC,KAAK,CAAC;MACxB,CAAE;MACFU,WAAW,EAAC,0DAAa;MACzBC,KAAK,EAAE;QACLC,WAAW,EAAEb,YAAY,GAAG,SAAS,GAAG;MAC1C;IAAE;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACF,eACFxB,OAAA,CAACF,MAAM;MAAC2B,IAAI,EAAC,QAAQ;MAAAX,QAAA,EAAC;IAAE;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACrB;AAElB,CAAC;AAACrB,EAAA,CAlCIF,QAAQ;AAAAyB,EAAA,GAARzB,QAAQ;AAoCd,eAAeA,QAAQ;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}